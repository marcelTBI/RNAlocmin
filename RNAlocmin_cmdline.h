/** @file RNAlocmin_cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.3
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef RNALOCMIN_CMDLINE_H
#define RNALOCMIN_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "RNAlocmin"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "RNAlocmin"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * move_arg;	/**< @brief Move set:\nI ==> insertion & deletion of base pair\nS ==> I&D& switch base pair (default='I').  */
  char * move_orig;	/**< @brief Move set:\nI ==> insertion & deletion of base pair\nS ==> I&D& switch base pair original value given at command line.  */
  const char *move_help; /**< @brief Move set:\nI ==> insertion & deletion of base pair\nS ==> I&D& switch base pair help description.  */
  int min_num_arg;	/**< @brief Maximal number of local minima returned (default='100').  */
  char * min_num_orig;	/**< @brief Maximal number of local minima returned original value given at command line.  */
  const char *min_num_help; /**< @brief Maximal number of local minima returned help description.  */
  int find_num_arg;	/**< @brief Maximal number of local minima found \n  (default = unlimited - crawl through whole file).  */
  char * find_num_orig;	/**< @brief Maximal number of local minima found \n  (default = unlimited - crawl through whole file) original value given at command line.  */
  const char *find_num_help; /**< @brief Maximal number of local minima found \n  (default = unlimited - crawl through whole file) help description.  */
  char * seq_arg;	/**< @brief Sequence file in FASTA format (default='seq.txt').  */
  char * seq_orig;	/**< @brief Sequence file in FASTA format original value given at command line.  */
  const char *seq_help; /**< @brief Sequence file in FASTA format help description.  */
  int verbose_lvl_arg;	/**< @brief Level of verbosity (0 = nothing, 4 = full)\n WARNING: higher verbose levels increase computation time (default='0').  */
  char * verbose_lvl_orig;	/**< @brief Level of verbosity (0 = nothing, 4 = full)\n WARNING: higher verbose levels increase computation time original value given at command line.  */
  const char *verbose_lvl_help; /**< @brief Level of verbosity (0 = nothing, 4 = full)\n WARNING: higher verbose levels increase computation time help description.  */
  int rates_flag;	/**< @brief Create rates for treekin (default=off).  */
  const char *rates_help; /**< @brief Create rates for treekin help description.  */
  char * rates_file_arg;	/**< @brief File where to write rates (default='rates.out').  */
  char * rates_file_orig;	/**< @brief File where to write rates original value given at command line.  */
  const char *rates_file_help; /**< @brief File where to write rates help description.  */
  double temp_arg;	/**< @brief Temperature in Celsius (only for rates) (default='37.0').  */
  char * temp_orig;	/**< @brief Temperature in Celsius (only for rates) original value given at command line.  */
  const char *temp_help; /**< @brief Temperature in Celsius (only for rates) help description.  */
  int depth_arg;	/**< @brief Depth of findpath search (higher values increase running time) (default='10').  */
  char * depth_orig;	/**< @brief Depth of findpath search (higher values increase running time) original value given at command line.  */
  const char *depth_help; /**< @brief Depth of findpath search (higher values increase running time) help description.  */
  double minh_arg;	/**< @brief Print only minima with energy barrier greater than this (default='0.0').  */
  char * minh_orig;	/**< @brief Print only minima with energy barrier greater than this original value given at command line.  */
  const char *minh_help; /**< @brief Print only minima with energy barrier greater than this help description.  */
  int noLP_flag;	/**< @brief Work with canonical RNA structures (w/o isolated base pairs) (default=off).  */
  const char *noLP_help; /**< @brief Work with canonical RNA structures (w/o isolated base pairs) help description.  */
  int bartree_flag;	/**< @brief Generate possible barrier tree (default=off).  */
  const char *bartree_help; /**< @brief Generate possible barrier tree help description.  */
  int useEOS_flag;	/**< @brief Use energy_of_structure_pt calculation instead of energy_of_move (slower, it should not affect results) (default=off).  */
  const char *useEOS_help; /**< @brief Use energy_of_structure_pt calculation instead of energy_of_move (slower, it should not affect results) help description.  */
  int useFirst_flag;	/**< @brief Use first found lower energy structure instead of deepest (default=off).  */
  const char *useFirst_help; /**< @brief Use first found lower energy structure instead of deepest help description.  */
  double floodPortion_arg;	/**< @brief Fraction of minima to flood\n(0.0 -> no flood; 1.0 -> try to flood all of them) (default='0.95').  */
  char * floodPortion_orig;	/**< @brief Fraction of minima to flood\n(0.0 -> no flood; 1.0 -> try to flood all of them) original value given at command line.  */
  const char *floodPortion_help; /**< @brief Fraction of minima to flood\n(0.0 -> no flood; 1.0 -> try to flood all of them) help description.  */
  int floodMax_arg;	/**< @brief Flood cap - how many structures to flood in one basin (default='1000').  */
  char * floodMax_orig;	/**< @brief Flood cap - how many structures to flood in one basin original value given at command line.  */
  const char *floodMax_help; /**< @brief Flood cap - how many structures to flood in one basin help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int move_given ;	/**< @brief Whether move was given.  */
  unsigned int min_num_given ;	/**< @brief Whether min-num was given.  */
  unsigned int find_num_given ;	/**< @brief Whether find-num was given.  */
  unsigned int seq_given ;	/**< @brief Whether seq was given.  */
  unsigned int verbose_lvl_given ;	/**< @brief Whether verbose-lvl was given.  */
  unsigned int rates_given ;	/**< @brief Whether rates was given.  */
  unsigned int rates_file_given ;	/**< @brief Whether rates-file was given.  */
  unsigned int temp_given ;	/**< @brief Whether temp was given.  */
  unsigned int depth_given ;	/**< @brief Whether depth was given.  */
  unsigned int minh_given ;	/**< @brief Whether minh was given.  */
  unsigned int noLP_given ;	/**< @brief Whether noLP was given.  */
  unsigned int bartree_given ;	/**< @brief Whether bartree was given.  */
  unsigned int useEOS_given ;	/**< @brief Whether useEOS was given.  */
  unsigned int useFirst_given ;	/**< @brief Whether useFirst was given.  */
  unsigned int floodPortion_given ;	/**< @brief Whether floodPortion was given.  */
  unsigned int floodMax_given ;	/**< @brief Whether floodMax was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_move_values[];  /**< @brief Possible values for move. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* RNALOCMIN_CMDLINE_H */
